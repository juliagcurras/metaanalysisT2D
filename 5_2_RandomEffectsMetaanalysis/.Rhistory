filter(ProteinID %in% names(interestingFrec))
xlsx::write.xlsx(x = datos10All, file = "proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F,
sheetName = "10_All")
allFrec <- table(df$ProteinID)
table(allFrec) # 26 shared between 8 studies; 8 shared between 9; 1 protein was identified in 10 studies
## P02763 was identified in 10 studies out o 12 with raw data
interestingFrec <- allFrec[which(allFrec > 9)] # 1
interestingFrec # P02763
df %>% filter(ProteinID == names(interestingFrec)) %>% View
datos10All<- df %>%
filter(ProteinID %in% names(interestingFrec))
xlsx::write.xlsx(x = datos10All, file = "proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F,
sheetName = "10_All")
interestingFrec <- allFrec[which(allFrec > 8)] # 8
interestingFrec # P01011 P01876 P02647 P02763 P02790 P04217 P06727 P11021 P19652
df %>% filter(ProteinID %in% names(interestingFrec)) %>% View
## Proteinas que aparecen en m치is de 2 estudio
interestingFrec <- allFrec[which(allFrec > 2)] # 26
length(interestingFrec)
# Julia G Curr치s - 2025/05/15
rm(list=ls())
graphics.off()
library(dplyr)
# Initial data ####
## Selecting list of proteins from each study that provided raw data ####
data <- readxl::read_xlsx(path = "../4_Processing/allProcessedProteinData.xlsx",
sheet = "Quantitative (all)", col_names = T)
rawData <- c("16_128", "284_268", "377_100", "425_58", "432_287", "446_99",
"440_211", "511_252", "944_401", "231_253", "499_339", "1046_653") # raw data studies
df <- data %>%
filter(ID %in% rawData)
table(df$ID)
df$logFC <- as.numeric(df$logFC)
df$pvalAdjFinal <- as.numeric(df$pvalAdjFinal)
## Joining basal information to protein list ####
basal <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx",
sheet = "1. Basal data", col_names = T)
# data <- basal %>%
#   dplyr::select(ID, Reference, `Type of sample (grouped)`) %>%
#   filter(ID %in% rawData)
sampleInfo <- basal %>% dplyr::select(ID, Reference, `Type of sample (grouped)`)
# Loading interesting prots form discusion, tables, validation, etc from different articles ####
intProts <- readxl::read_excel(path = "RelevantBiomarkers.xlsx",
sheet = 1, col_names = T)
table(table(intProts$ProteinID))
intProts <- merge(intProts, sampleInfo, by = "ID", all.x = T)
# Finding common proteins ####
## ALL SAMPLES ####
## For each proteins, the number of studies in which they appeared
allFrec <- table(df$ProteinID)
table(allFrec) # 26 shared between 8 studies; 8 shared between 9; 1 protein was identified in 10 studies
### Selection (I): identified in 10 studies ####
## P02763 was identified in 10 studies out o 12 with raw data
interestingFrec <- allFrec[which(allFrec > 9)] # 1
interestingFrec # P02763
df %>% filter(ProteinID == names(interestingFrec)) %>% View
datos10All<- df %>%
filter(ProteinID %in% names(interestingFrec))
xlsx::write.xlsx(x = datos10All, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F,
sheetName = "10_All")
View(datos10All)
##############################################################################-
######   SELECTING INTERESTING PROTEINS FOR TRADITIONAL METANALYSIS    #######-
##############################################################################-
# Julia G Curr치s - 2025/05/15
rm(list=ls())
graphics.off()
library(dplyr)
# Initial data ####
## Selecting list of proteins from each study that provided raw data ####
data <- readxl::read_xlsx(path = "../4_Processing/allProcessedProteinData.xlsx",
sheet = "Quantitative (all)", col_names = T)
rawData <- c("16_128", "284_268", "377_100", "425_58", "432_287", "446_99",
"440_211", "511_252", "944_401", "231_253", "499_339", "1046_653") # raw data studies
df <- data %>%
filter(ID %in% rawData)
table(df$ID)
df$logFC <- as.numeric(df$logFC)
df$pvalAdjFinal <- as.numeric(df$pvalAdjFinal)
## Joining basal information to protein list ####
basal <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx",
sheet = "1. Basal data", col_names = T)
# data <- basal %>%
#   dplyr::select(ID, Reference, `Type of sample (grouped)`) %>%
#   filter(ID %in% rawData)
sampleInfo <- basal %>% dplyr::select(ID, Reference, `Type of sample (grouped)`)
# Loading interesting prots form discusion, tables, validation, etc from different articles ####
intProts <- readxl::read_excel(path = "RelevantBiomarkers.xlsx",
sheet = 1, col_names = T)
table(table(intProts$ProteinID))
intProts <- merge(intProts, sampleInfo, by = "ID", all.x = T)
# Finding common proteins ####
## ALL SAMPLES ####
## For each proteins, the number of studies in which they appeared
allFrec <- table(df$ProteinID)
table(allFrec) # 26 shared between 8 studies; 8 shared between 9; 1 protein was identified in 10 studies
### Selection (I): identified in 10 studies ####
## P02763 was identified in 10 studies out o 12 with raw data
interestingFrec <- allFrec[which(allFrec > 9)] # 1
interestingFrec # P02763
df %>% filter(ProteinID == names(interestingFrec)) %>% View
datos10All<- df %>%
filter(ProteinID %in% names(interestingFrec))
xlsx::write.xlsx(x = datos10All, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F,
sheetName = "10_All")
datos10All<- df %>%
filter(ProteinID %in% names(interestingFrec)) %>%
as.data.frame()
xlsx::write.xlsx(x = datos10All, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F,
sheetName = "10_All")
### Selection (II): identified in >7 studies & interesting protein ####
# From proteins identified in >7 studies, those that appear in the list of interesting
# proteins were selected
prot8_9 <- df %>% filter(ProteinID %in% intProts$ProteinID) %>%
group_by(ProteinID) %>%
arrange(length(ProteinID)) %>%
summarise(n = length(ProteinID)) %>%
filter(n> 7) %>%
ungroup() %>% pull(ProteinID)
df %>% filter(ProteinID %in% prot8_9) %>% View
datos8_9_All <- df %>%
filter(ProteinID %in% prot8_9) %>%
arrange(ProteinID) %>%
as.data.frame()
xlsx::write.xlsx(x = datos8_9_All, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F, append = T,
sheetName = "8_9_All")
## BY SAMPLE ####
### EYE ####
eyeData <- data %>% filter(TypeOfSample_2 == "Eye") %>% pull(ID)
dfEye <- df %>% dplyr::filter(ID %in% eyeData)
## BY SAMPLE ####
### EYE ####
eyeData <- basal %>% filter(`Type of sample (grouped)` == "Eye") %>% pull(ID)
dfEye <- df %>% dplyr::filter(ID %in% eyeData)
## For each protein, number of studies
allFrec <- table(dfEye$ProteinID)
table(allFrec)
allFrec[which(allFrec > 1)] # Proteins identified in more than one study
## Interesting proteins
prots <- intProts %>% filter(TypeOfSample_2 == "Eye" ) %>% pull(ProteinID)
dfEye %>% filter(ProteinID %in% prots) %>% View
## Interesting proteins
prots <- intProts %>% filter(`Type of sample (grouped)` == "Eye" ) %>% pull(ProteinID)
dfEye %>% filter(ProteinID %in% prots) %>% View
## Saving
datosEye <- dfEye %>%
filter(ProteinID %in% c("P61626", "P02649", "P25311")) %>%
arrange(ProteinID)
xlsx::write.xlsx(x = datosEye, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F, append = T,
sheetName = "4_3_Eye")
## Saving
datosEye <- dfEye %>%
filter(ProteinID %in% c("P61626", "P02649", "P25311")) %>%
arrange(ProteinID) %>% as.data.frame()
xlsx::write.xlsx(x = datosEye, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F, append = T,
sheetName = "4_3_Eye")
### BLOOD ####
bloodData <- basal %>%
filter(`Type of sample (grouped)` %in% c("Serum", "Plasma", "Extracellular vesicles (blood)")) %>%
pull(ID)
dfBlood <- df %>% dplyr::filter(ID %in% bloodData)
## For each protein, number of studies
allFrec <- table(dfBlood$ProteinID)
table(allFrec)
allFrec[which(allFrec > 1)] # Proteins identified in more than one study
## Interesting proteins
prots <- intProts %>% filter(ID %in% unique(dfBlood$ID)) %>% pull(ProteinID)
dfBlood %>% filter(ProteinID %in% prots) %>% View
protsBlood3 <- dfBlood %>%
filter(ProteinID %in% prots) %>%
group_by(ProteinID) %>%
arrange(length(ProteinID)) %>%
summarise(n = length(ProteinID)) %>%
filter(n > 2) %>%
ungroup() %>% pull(ProteinID)
## Saving
datosBlood <- dfBlood %>%
filter(ProteinID %in% protsBlood3) %>%
arrange(ProteinID)
## Saving
datosBlood <- dfBlood %>%
filter(ProteinID %in% protsBlood3) %>%
arrange(ProteinID) %>% as.data.frame()
xlsx::write.xlsx(x = datosBlood, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F, append = T,
sheetName = "3_Blood")
## URINE ####
urineData <- basal %>%
filter(`Type of sample (grouped)` %in% c("Urine")) %>%
pull(ID)
dfUrine <- df %>% dplyr::filter(ID %in% urineData)
## For each protein, number of studies
allFrec <- table(dfUrine$ProteinID)
table(allFrec)
allFrec[which(allFrec > 1)] # # Proteins identified in more than one study
## Interesting proteins
prots <- intProts %>% filter(ID %in% unique(dfUrine$ID)) %>% pull(ProteinID)
dfUrine %>% filter(ProteinID %in% prots) %>% View
dfUrine %>% filter(ProteinID %in% prots) %>% View
## Saving
datosUrine <- dfUrine %>%
filter(ProteinID %in% c("P01011", "P02768")) %>%
arrange(ProteinID) %>% as.data.frame()
xlsx::write.xlsx(x = datosUrine, file = "3_proteinsForMetanalisis.xlsx",
col.names = T, row.names = F, showNA = F, append = T,
sheetName = "2_Urine")
# Julia G Curr치s - 2025/05/28
rm(list=ls())
graphics.off()
library(dplyr)
library(Biostatech)
library(meta)
# SMD and SE estimation
getSMD <- function(df, proteina){
# Get data
df <- df[proteina,]
dm <- df %>% dplyr::select(starts_with("T2DM_")) %>% as.vector %>% unlist
nDM <- length(dm)
control <- df %>% dplyr::select(starts_with("Control_")) %>% as.vector %>% unlist
nControl <- length(control)
# get SMD and SE pooled
result <- esc::esc_mean_sd(grp1m = mean(dm), grp1sd = sd(dm), grp1n = nDM,
grp2m = mean(control), grp2sd = sd(control),
grp2n = nControl)
return(list(SMD = result$es, SE = result$se))
}
# Loading curated, raw data ####
lista <- readRDS(file = "2_allRawDataProcessed.rds")
# Loading interesting proteins ####
hojas <- readxl::excel_sheets("3_proteinsForMetanalisis.xlsx")
allDatasets <- list()
for (i in hojas){
allDatasets[[i]] <- readxl::read_xlsx(path = "3_proteinsForMetanalisis.xlsx",
sheet = i, col_names = T)
}
# Loading extra data ####
basal <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx",
sheet = "1. Basal data", col_names = T)
sampleInfo <- basal %>%
dplyr::select(ID, Reference, `Type of sample (grouped)`, `Data acquisition mode`) %>%
rename(Sample = `Type of sample (grouped)`)
sampleInfo$Sample <- as.character(sampleInfo$Sample)
sampleInfo$Sample <- ifelse(sampleInfo$Sample == "Pancreas biopsy (pancreatic island cells)",
"Pancreas",
ifelse(sampleInfo$Sample == "Extracellular vesicles (blood)", "Blood (EV)",
ifelse(sampleInfo$Sample == "Serum", "Blood (Serum)",
ifelse(sampleInfo$Sample == "Plasma", "Blood (Plasma)",
sampleInfo$Sample))))
# Meta-analysis ####
allMeta <- list()
for(j in hojas){
# j <- hojas[2]
data <- as.data.frame(allDatasets[[j]])
proteinas <- unique(data$ProteinID)
nombre <- gsub(j, pattern = "[^A-Za-z]", replacement = "")
# proteina <- proteinas[1]
for (proteina in proteinas){
# Select info
ids <- data[which(data$ProteinID == proteina), "ID"]
selectedList <- lista[ids]
# Get SDM and SE
result <- lapply(selectedList, getSMD, proteina)
df <- data.frame(
ID = names(result),
SMD = sapply(result, "[[", 1),
SE = sapply(result, "[[", 2),
row.names = NULL
)
df <- merge(df, sampleInfo, by = "ID", all.x = T)
# Metanalysis
m.gen <- metagen(TE = df$SMD,
seTE = df$SE,
studlab = df$Reference,
data = df,
sm = "SMD",
common = FALSE,
random = TRUE,
method.tau = "REML",
method.random.ci = "HK",
title = proteina)
# Save
finalName <- paste0(nombre, "_", proteina)
allMeta[[finalName]] <- m.gen
}
}
View(allDatasets)
## Saving ####
saveRDS(object = allMeta, file = "metaResult.RDS")
## Display ####
p1 <- meta::forest(m.gen,
sortvar = Sample,
leftcols = c("studlab", "Sample", "effect", "ci", "w.random"),
rightcols = FALSE,
leftlabs = c("Author", "Sample", "SMD", "95%-CI", "Weigth"),
prediction = TRUE,
print.I2 = TRUE,
print.I2.ci = TRUE,
print.tau2 = TRUE,
print.tau2.ci = TRUE)
p1
## Code for display results ####
p1 <- meta::forest(allMeta$All_P62937,
sortvar = Sample,
leftcols = c("studlab", "Sample", "effect", "ci", "w.random"),
rightcols = FALSE,
leftlabs = c("Author", "Sample", "SMD", "95%-CI", "Weigth"),
prediction = TRUE,
print.I2 = TRUE,
print.I2.ci = TRUE,
print.tau2 = TRUE,
print.tau2.ci = TRUE)
p1
setwd("C:/Users/julia/Documents/GitHub/metaanalysisT2D/5_2_Metaanalysis_Meta")
allMeta <- readRDS(file = "4_metaResult.RDS")
View(allMeta)
allMeta$All_P02763
res <- allMeta$All_P02763
df_estudios <- data.frame(
estudio = res$studlab,
SMD = res$TE,
SD_pooled = res$seTE,
IC95_inf = res$lower,
IC95_sup = res$upper
)
View(df_estudios)
df_estudios <- data.frame(
estudio = res$studlab,
SMD = res$TE,
SD_pooled = res$seTE,
IC95_inf = res$lower,
IC95_sup = res$upper,
res$cluster
)
res$cluster
View(res)
df_global <- data.frame(
estudio = "Global (random effects)",
SMD = res$TE.random,
SD_pooled = res$seTE.random,
IC95_inf = res$lower.random,
IC95_sup = res$upper.random
)
View(df_global)
df_hetero <- data.frame(
estudio = "Heterogeneity",
SMD = NA,
SD_pooled = NA,
IC95_inf = NA,
IC95_sup = NA,
tau2 = res$tau^2,
se_tau2 = res$se.tau,
I2 = res$I2,
lower_I2 = res$lower.I2,
upper_I2 = res$upper.I2,
pval_Q = res$pval.Q
)
View(df_hetero)
# Si quer칠s incluir las columnas extra solo en la fila de heterogeneidad, usamos bind_rows:
df_final <- dplyr::bind_rows(
df_estudios,
df_global,
df_hetero
)
View(df_final)
for (protein in names(allMeta)){
res <- allMeta[[protein]]
# Extract info studies
df_estudios <- data.frame(
estudio = res$studlab,
SMD = res$TE,
SD_pooled = res$seTE,
IC95_inf = res$lower,
IC95_sup = res$upper,
TypeOfSample = res$data$Sample,
DataAcquisition = res$data$`Data acquisition mode`
)
# Extract aggregated results (SMD)
df_global <- data.frame(
estudio = "Global (random effects)",
SMD = res$TE.random,
SD_pooled = res$seTE.random,
IC95_inf = res$lower.random,
IC95_sup = res$upper.random
)
# Extract heterogenity measures
df_hetero <- data.frame(
estudio = "Heterogeneity",
SMD = NA,
SD_pooled = NA,
IC95_inf = NA,
IC95_sup = NA,
tau2 = res$tau^2,
se_tau2 = res$se.tau,
I2 = res$I2,
lower_I2 = res$lower.I2,
upper_I2 = res$upper.I2,
pval_Q = res$pval.Q
)
# Bind everything
df_final <- dplyr::bind_rows(
df_estudios,
df_global,
df_hetero
)
xlsx::write.xlsx(x = df_final, file = "4_resultMetanalysis.xlsx",
sheetName = protein, col.names = T, row.names = T,
append = newAppend, showNA = F)
newAppend <- T
}
newAppend <- F
for (protein in names(allMeta)){
res <- allMeta[[protein]]
# Extract info studies
df_estudios <- data.frame(
estudio = res$studlab,
SMD = res$TE,
SD_pooled = res$seTE,
IC95_inf = res$lower,
IC95_sup = res$upper,
TypeOfSample = res$data$Sample,
DataAcquisition = res$data$`Data acquisition mode`
)
# Extract aggregated results (SMD)
df_global <- data.frame(
estudio = "Global (random effects)",
SMD = res$TE.random,
SD_pooled = res$seTE.random,
IC95_inf = res$lower.random,
IC95_sup = res$upper.random
)
# Extract heterogenity measures
df_hetero <- data.frame(
estudio = "Heterogeneity",
SMD = NA,
SD_pooled = NA,
IC95_inf = NA,
IC95_sup = NA,
tau2 = res$tau^2,
se_tau2 = res$se.tau,
I2 = res$I2,
lower_I2 = res$lower.I2,
upper_I2 = res$upper.I2,
pval_Q = res$pval.Q
)
# Bind everything
df_final <- dplyr::bind_rows(
df_estudios,
df_global,
df_hetero
)
xlsx::write.xlsx(x = df_final, file = "4_resultMetanalysis.xlsx",
sheetName = protein, col.names = T, row.names = T,
append = newAppend, showNA = F)
newAppend <- T
}
## Saving ####
# saveRDS(object = allMeta, file = "4_metaResult.RDS")
allMeta <- readRDS(file = "4_metaResult.RDS")
newAppend <- F
for (protein in names(allMeta)){
res <- allMeta[[protein]]
# Extract info studies
df_estudios <- data.frame(
Study = res$studlab,
SMD = res$TE,
SD_pooled = res$seTE,
IC95_inf = res$lower,
IC95_sup = res$upper,
TypeOfSample = res$data$Sample,
DataAcquisition = res$data$`Data acquisition mode`
)
# Extract aggregated results (SMD)
df_global <- data.frame(
Study = "Global (random effects)",
SMD = res$TE.random,
SD_pooled = res$seTE.random,
IC95_inf = res$lower.random,
IC95_sup = res$upper.random
)
# Extract heterogenity measures
df_hetero <- data.frame(
Study = "Heterogeneity",
SMD = NA,
SD_pooled = NA,
IC95_inf = NA,
IC95_sup = NA,
tau2 = res$tau^2,
se_tau2 = res$se.tau,
I2 = res$I2,
lower_I2 = res$lower.I2,
upper_I2 = res$upper.I2,
pval_Q = res$pval.Q
)
# Bind everything
df_final <- dplyr::bind_rows(
df_estudios,
df_global,
df_hetero
)
xlsx::write.xlsx(x = df_final, file = "4_resultMetanalysis.xlsx",
sheetName = protein, col.names = T, row.names = F,
append = newAppend, showNA = F)
newAppend <- T
}
