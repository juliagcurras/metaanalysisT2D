for (i in unique(dfProts$ID)){
# Adjustment for slightly differences in study IDs between basal data (data) and protein data (dfProts)
if (nchar(i) > 8) {
i_data <- substr(i, 1, nchar(i) - 4)
} else {
i_data <- i
}
cat("\n ", i, "\n")
# Checking p-value info
infoPval <- unname(unlist(as.vector(data[data$ID == i_data, c("infoPvalue", "infoAdjustedPvalue", "TotalProteins")])))
if (all(infoPval[1] == "No", infoPval[2] == "Yes")){ # Only adjusted pvalues
adjPvals <- c(adjPvals, dfProts[dfProts$ID == i, "pvalAdj"])
} else if (all(infoPval[1] == "No", infoPval[2] == "No")){ # Any information
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else if (infoPval[1] == "Yes"){ # P-values info, then adjusted p-values are estimated
if (is.na(infoPval[3])){
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else {
pvalores <- as.vector(as.numeric(dfProts[dfProts$ID == i, "pval"]))
ni <- as.numeric(infoPval[3])
ajustados <- stats::p.adjust(
p = pvalores,
method = "BH",
n = ni # Total proteins
)
adjPvals <- c(adjPvals, ajustados)
}
} else {
cat("error")
}
}
## Homogenization ####
### Pvalues ####
adjPvals <- c()
for (i in unique(dfProts$ID)){
# Adjustment for slightly differences in study IDs between basal data (data) and protein data (dfProts)
if (nchar(i) > 8) {
i_data <- substr(i, 1, nchar(i) - 4)
} else {
i_data <- i
}
cat("\n ", i_data, "\n")
# Checking p-value info
infoPval <- unname(unlist(as.vector(data[data$ID == i_data, c("infoPvalue", "infoAdjustedPvalue", "TotalProteins")])))
if (all(infoPval[1] == "No", infoPval[2] == "Yes")){ # Only adjusted pvalues
adjPvals <- c(adjPvals, dfProts[dfProts$ID == i, "pvalAdj"])
} else if (all(infoPval[1] == "No", infoPval[2] == "No")){ # Any information
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else if (infoPval[1] == "Yes"){ # P-values info, then adjusted p-values are estimated
if (is.na(infoPval[3])){
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else {
pvalores <- as.vector(as.numeric(dfProts[dfProts$ID == i, "pval"]))
ni <- as.numeric(infoPval[3])
ajustados <- stats::p.adjust(
p = pvalores,
method = "BH",
n = ni # Total proteins
)
adjPvals <- c(adjPvals, ajustados)
}
} else {
cat("error")
}
}
i_data
# Checking p-value info
infoPval <- unname(unlist(as.vector(data[data$ID == i_data, c("infoPvalue", "infoAdjustedPvalue", "TotalProteins")])))
infoPval
all(infoPval[1] == "No", infoPval[2] == "Yes")
View(data)
all(infoPval[1] == "No", infoPval[2] == "Yes")
all(infoPval[1] == "No", infoPval[2] == "No")
infoPval[1] == "Yes"
is.na(infoPval[3])
pvalores <- as.vector(as.numeric(dfProts[dfProts$ID == i, "pval"]))
dfProts[dfProts$ID == i, "pval"]
# Chagne from tibble to dataframe
dfProts <- as.data.frame(dfProts)
## Homogenization ####
### Pvalues ####
adjPvals <- c()
for (i in unique(dfProts$ID)){
# Adjustment for slightly differences in study IDs between basal data (data) and protein data (dfProts)
if (nchar(i) > 8) {
i_data <- substr(i, 1, nchar(i) - 4)
} else {
i_data <- i
}
cat("\n ", i_data, "\n")
# Checking p-value info
infoPval <- unname(unlist(as.vector(data[data$ID == i_data, c("infoPvalue", "infoAdjustedPvalue", "TotalProteins")])))
if (all(infoPval[1] == "No", infoPval[2] == "Yes")){ # Only adjusted pvalues
adjPvals <- c(adjPvals, dfProts[dfProts$ID == i, "pvalAdj"])
} else if (all(infoPval[1] == "No", infoPval[2] == "No")){ # Any information
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else if (infoPval[1] == "Yes"){ # P-values info, then adjusted p-values are estimated
if (is.na(infoPval[3])){
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else {
pvalores <- as.vector(as.numeric(dfProts[dfProts$ID == i, "pval"]))
ni <- as.numeric(infoPval[3])
ajustados <- stats::p.adjust(
p = pvalores,
method = "BH",
n = ni # Total proteins
)
adjPvals <- c(adjPvals, ajustados)
}
} else {
cat("error")
}
}
# Using new adjusted p-values when no adjusted p-value is provided, but the
# original adjusted p-values are used always instead the new ones if this
# data was provided
dfProts$pvalAdjNew <- adjPvals
dfProts$ProbaPVAL <- ifelse(is.na(dfProts$pval) & is.na(dfProts$pvalAdj), NA,
ifelse(!is.na(dfProts$pval) & is.na(dfProts$pvalAdj), dfProts$pvalAdjNew,
ifelse(is.na(dfProts$pval) & !is.na(dfProts$pvalAdj), dfProts$pvalAdj,
ifelse(!is.na(dfProts$pval) & !is.na(dfProts$pvalAdj), dfProts$pvalAdj, "Error"
)
)
)
)
# Checking that the ifelse have worked properly
dfProts %>% dplyr::select(pval, pvalAdj, pvalAdjNew, ProbaPVAL, ID) %>% View
# Loading basal and protein data bases ####
data <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx", sheet = "1. Basal data")
dfProts <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx", sheet = "2. Protein data")
# Julia G CurrÃ¡s - 2025/05/15
rm(list=ls())
graphics.off()
setwd("G:/Mi unidad/_General/DoctoradoIndustrial2022/Publicaciones/METAANALISIS/R/3_ExtractData")
library(dplyr)
library(Biostatech)
# Basal data of relevant studies (29) ####
data <- xlsx::read.xlsx(
file = "../../Data/3_Extraction/CRD_Final.xlsx",
sheetName = "Global",
header = T,
as.data.frame = T,
endRow = 28
)
nrow(data)
## Qualitative analysis N = 27 ####
### Basal data proccessing ####
data$Year <- factor(data$Year, levels = 2011:2025)
data$Country <- factor(data$Country,
levels = names(table(data$Country))[order(table(data$Country), decreasing = T)])
data$Journal <- factor(data$Journal,
levels = names(table(data$Journal))[order(table(data$Journal), decreasing = T)])
data$TypeOfSample_2 <- ifelse(data$TypeOfSample == "Endothelium-Descemet membrane complex (EDM)", "Eye",
ifelse(data$TypeOfSample == "Tear", "Eye",
ifelse(data$TypeOfSample == "Aqueous humor", "Eye",
ifelse(data$TypeOfSample %in% c("Muscle biopses (mitochondria)", "Muscle biopses (myotubes)"), "Muscle biopsy",
data$TypeOfSample))))
data$TypeOfSample_2 <- factor(data$TypeOfSample_2,
levels = names(table(data$TypeOfSample_2))[order(table(data$TypeOfSample_2), decreasing = T)])
Hmisc::label(data$TypeOfSample_2) <- "Type of sample (grouped)"
data$TypeOfSample <- factor(data$TypeOfSample,
levels = names(table(data$TypeOfSample))[order(table(data$TypeOfSample), decreasing = T)])
Hmisc::label(data$TypeOfSample_2) <- "Type of sample (grouped)"
Hmisc::label(data$TypeOfSample) <- "Type of sample (original)"
# ID #
data$ID <- paste0(data$ID., "_", sapply(sapply(data$ID_2, strsplit, split = "_", ), "[[", 1))
data <- data %>% dplyr::select(ID, everything())
# Adjusted method #
data$AdjustedMethodDic <- ifelse(data$AdjustedMethod == "Not reported", "Not reported",
ifelse(data$AdjustedMethod == "None", "No",
ifelse(data$AdjustedMethod == "Not reported method", "Yes", "Yes")))
data$AdjustedMethodDic <- factor(data$AdjustedMethodDic, levels = c("Yes", "No", "Not reported"))
data$AdjustedMethod <- ifelse(data$AdjustedMethodDic == "No", NA,
ifelse(data$AdjustedMethodDic == "Not reported", NA,
data$AdjustedMethod))
# Factor and sort #
sortByFreq <- function(catVector, decreasing = T){
catVector <- as.character(catVector)
catVector <- factor(catVector,
levels = names(table(catVector))[order(table(catVector), decreasing = decreasing)])
return(catVector)
}
sortByFreqMulti <- function(df, varNames = NULL, decreasing = T){
if (is.null(varNames)){
df1 <- df
} else {
df1 <- df[, varNames]
}
df2 <- sapply(colnames(df1),
function(i) sortByFreq(df1[,i], decreasing = decreasing),
simplify = F, USE.NAMES = T)
df2 <- as.data.frame(df2, stringsAsFactors = FALSE)
return(df2)
}
varsToSort <- data %>%  dplyr::select(ComercialHouse:SoftwareA) %>% colnames
data[, varsToSort] <- sortByFreqMulti(data, varNames = varsToSort)
varsToSort <- data %>%
dplyr::select(SoftwareDownstreamAnalysis:Tool_FuncitonalAnalysis) %>%
colnames
data[, varsToSort] <- sortByFreqMulti(data, varNames = varsToSort)
# Labelling #
Hmisc::label(data$ComercialHouse) <- "Comercial house"
Hmisc::label(data$TypeMS.) <- "Type of MS"
Hmisc::label(data$IntrumentModel) <- "Instrument Model"
Hmisc::label(data$DataAdquisition) <- "Data acquisition mode"
Hmisc::label(data$DIAMethod) <- "DIA method"
Hmisc::label(data$ReferenceLibrary) <- "Reference library"
Hmisc::label(data$SoftwareA) <- "Software"
Hmisc::label(data$SoftwareDownstreamAnalysis) <- "Software for downstream analisys"
Hmisc::label(data$Normalization) <- "Normalization"
Hmisc::label(data$StatisticalTest) <- "Statistical test"
Hmisc::label(data$AdjustedMethod) <- "P-value adjustment method"
Hmisc::label(data$AdjustedMethodDic) <- "Adjustment?"
Hmisc::label(data$DataImputation) <- "Imputation?"
Hmisc::label(data$TypeOfImputation) <- "Type of imputation"
Hmisc::label(data$FuncitonalAnalysis) <- "Functional analysis?"
Hmisc::label(data$Tool_FuncitonalAnalysis) <- "Tool used forunctional analysis"
### Demographic data proccessing ####
# load data #
dataDM <- xlsx::read.xlsx(
file = "../../Data/3_Extraction/CRD_Final.xlsx",
sheetName = "Diabetes",
header = T,
as.data.frame = T,
endRow = 28
)[,1:26]
nrow(dataDM)
dataC<- xlsx::read.xlsx(
file = "../../Data/3_Extraction/CRD_Final.xlsx",
sheetName = "Control",
header = T,
as.data.frame = T,
endRow = 28
)
nrow(dataC)
# Labelling #
variables <- dataDM %>%
dplyr::select(Age_Mean, Gender_PercFemales, EthnicGroup, Weight_Mean, Height_Mean,
BMI_Mean, Smoking, AlcoholConsumption, FamilyHistory_Perc, Diet,
EvolutionTime_Mean, HbA1C_Mean, FPG_Mean, Treatment_PercYes,
TypeOfTreatment) %>% colnames()
etiquetas <- c("Age (years)", "Gender", "Ethnic group", "Weight", "Height",
"BMI", "Smoking status", "Alcohol consumption", "Family history",
"Diet", "Duration of diabetes", "HbA1c", "FPG", "% treated patients",
"Type of treatment")
dataDM <- getLabels(data = dataDM, variables = variables, etiquetas = etiquetas)
variables <- dataC %>%
dplyr::select(Age_Mean, Gender_PercFemales, EthnicGroup, Weight_Mean, Height_Mean,
BMI_Mean, Smoking, AlcoholConsumption, FamilyHistory_Perc, Diet,
HbA1C_Mean, FPG_Mean) %>% colnames()
etiquetas <- c("Age (years)", "Gender", "Ethnic group", "Weight", "Height",
"BMI", "Smoking status", "Alcohol consumption", "Family history",
"Diet", "HbA1c", "FPG")
dataC <- getLabels(data = dataC, variables = variables, etiquetas = etiquetas)
# Saving #
output <- list(DM = dataDM,
C = dataC)
saveRDS(output, file = "../../Data/4_Metanalisis/demographic.rds")
## Quantitative analysis N = 23 ####
dataQ <- data[!(data$infoPvalue == "No" & data$infoAdjustedPvalue == "No"), ]
dataQ <- dataQ %>% filter(ID != "1098_977") # Ten a direcciÃ³n do logFC pero non o valor concreto
# Sample #
table(dataQ$TypeOfSample_2)
#.------- SAVING ------.####
listaBasal <- list(
all = data,
quantitative = dataQ
)
saveRDS(listaBasal, file = "../../Data/4_Metanalisis/basal.rds")
# saveRDS(object = data, file = "../../Data/4_Metanalisis/basalDatabase.rds")
listaBasal <- readRDS(file = "../../Data/4_Metanalisis/basal.rds")
data <- listaBasal$all
dataQ <- listaBasal$quantitative
# Saving for paper #
finalColnames <- c()
for (i in colnames(data)){
if (Hmisc::label(data[,i]) == ""){
finalColnames <- c(finalColnames, i)
} else {
finalColnames <- c(finalColnames, Hmisc::label(data[,i]))
}
}
colnames(data) <- finalColnames
writexl::write_xlsx(data, path = "../../Data/3_Extraction/CRD_Paper.xlsx", col_names = T)
# Julia G CurrÃ¡s - 2025/05/15
rm(list=ls())
graphics.off()
library(dplyr)
# Loading basal and protein data bases ####
data <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx", sheet = "1. Basal data")
setwd("C:/Users/julia/Documents/GitHub/metaanalysisT2D/4_Processing")
library(dplyr)
# Loading basal and protein data bases ####
data <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx", sheet = "1. Basal data")
dfProts <- readxl::read_xlsx(path = "../3_Extraction/Database.xlsx", sheet = "2. Protein data")
genes <- dfProts %>% filter(is.na(ProteinID)) %>% pull(ProteinName)
dfGenes <- as.data.frame(genes)
#.----------------------    MAPPING AND SEARCH INTO UNIPROT    ---------------.#
proteinID <- readxl::read_xlsx(path = "UniProtMapping/UNIPROT_idmapping_GenesToMap_2025_05_15.xlsx",
sheet = 1, col_names = T)
proteinID <- as.data.frame(proteinID)
# Only reviewed entries
proteinID <- proteinID %>% filter(Reviewed == "reviewed")
# Dealing with >1 Uniprot ID for the same protein/gene name
dfGenes$Protein <- unname(unlist(sapply(dfGenes$genes, function(i){
if (i %in% proteinID$From){
resultado <- proteinID[which(proteinID$From == i), "Entry"]
if (length(resultado) > 1){
return(paste0(resultado, collapse = ";"))
} else{
return(resultado)
}
} else {
return(NA)
}
}, simplify = F)))
table(dfProts[which(is.na(dfProts$ProteinID)), "ProteinName"] == genes) # genes match lack-of-protein ID rows
dfProts[which(is.na(dfProts$ProteinID)), "ProteinID"] <- dfGenes$Protein
table(is.na(dfProts$ProteinID)) # 581 proteins without Uniprot ID => REMOVING
dfProts <- dfProts %>% filter(!is.na(ProteinID))
## Get Gene/protein name ####
proteins <- dfProts %>% filter(is.na(ProteinName)) %>% pull(ProteinID)
proteinsDF <- as.data.frame(proteins)
genesID <- readxl::read_xlsx(path = "UniProtMapping/UNIPROT_idmapping_ProteinsToMap_2025_05_15.xlsx",
sheet = 1, col_names = T)
genesID <- as.data.frame(genesID)
colnames(genesID) <- c("Uniprot", "GeneName")
# Dealing with >1 gene/protein name for the same UniProt ID
proteinsDF$Genes <- unname(unlist(sapply(proteinsDF$proteins, function(i){
if (i %in% genesID$Uniprot){
resultado <- genesID[which(genesID$Uniprot == i), "GeneName"]
if (length(resultado) > 1){
return(paste0(resultado, collapse = ";"))
} else{
return(resultado)
}
} else {
return(NA)
}
}, simplify = F)))
table(dfProts[which(is.na(dfProts$ProteinName)), "ProteinID"] == proteins)
dfProts[which(is.na(dfProts$ProteinName)), "ProteinName"] <- proteinsDF$Genes
table(is.na(dfProts$ProteinName)) # 4053 proteins without gene/protein name
## Any duplicated UniProt ID within a specific dataset? ####
for (i in unique(dfProts$ID)){
cat(i, ": \t")
cat(any(duplicated(dfProts[which(dfProts$ID == i), "ProteinID"]))) # 1097_685, 1276_2
cat(" with total of ")
cat(sum(duplicated(dfProts[which(dfProts$ID == i), "ProteinID"])))
cat("\n")
}
### 1097_685: Aggregation ####
df1097 <- dfProts %>% filter(ID == "1097_685")
df1097$ProteinID[duplicated(df1097$ProteinID)] # Duplicated proteins
dfNew1097 <- df1097 %>%
group_by(ProteinID, ProteinName, ProteinDescription, Reference, ID) %>% # Aggregate by protein ID
summarise( # veage of logFC and p-value
logFC = mean(logFC),
pvalAdj = mean(pvalAdj),
.groups = "drop"
)
dfNew1097$FC <- NA
dfNew1097$pval <- NA
dfNew1097 <- dfNew1097 %>% dplyr::select(ID, ProteinID:ProteinDescription, logFC, FC, pval, pvalAdj, Reference)
# Join to main database
dfProts <- dfProts %>% filter(ID != "1097_685")
dfProts <- rbind(dfProts, dfNew1097)
### 1276_2: Aggregation ####
dfAux <- dfProts %>% filter(ID == "1276_2")
proteinsToChange <- dfAux$ProteinID[duplicated(dfAux$ProteinID)] # Duplicated proteins
dfAux %>% filter(ProteinID %in% proteinsToChange) %>% View
# Name homogenization for FAM21
dfAux[which(dfAux$ProteinName %in% c("FAM21A", "FAM21B")), "ProteinName"] <- "WASHC2A"
dfAux[which(dfAux$ProteinName == "WASHC2A"), "ProteinDescription"] <- "family with sequence similarity 21 (	WASHC2A, FAM21A, FAM21B)"
# Average for duplicated ids
dfNew1276 <- dfAux %>%
group_by(ProteinID, ProteinName, ProteinDescription, Reference, ID) %>%
summarise(
logFC = mean(logFC),
pval = mean(pval),
.groups = "drop"
)
dfNew1276$FC <- NA
dfNew1276$pvalAdj <- NA
dfNew1276 <- dfNew1276 %>% dplyr::select(ID, ProteinID:ProteinDescription, logFC, FC, pval, pvalAdj, Reference)
# Joint everything
dfProts <- dfProts %>% filter(ID != "1276_2")
dfProts <- rbind(dfProts, dfNew1276)
nrow(dfProts)
# Chagne from tibble to dataframe
dfProts <- as.data.frame(dfProts)
## Homogenization ####
### Pvalues ####
adjPvals <- c()
for (i in unique(dfProts$ID)){
# Adjustment for slightly differences in study IDs between basal data (data) and protein data (dfProts)
if (nchar(i) > 8) {
i_data <- substr(i, 1, nchar(i) - 4)
} else {
i_data <- i
}
cat("\n ", i_data, "\n")
# Checking p-value info
infoPval <- unname(unlist(as.vector(data[data$ID == i_data, c("infoPvalue", "infoAdjustedPvalue", "TotalProteins")])))
if (all(infoPval[1] == "No", infoPval[2] == "Yes")){ # Only adjusted pvalues
adjPvals <- c(adjPvals, dfProts[dfProts$ID == i, "pvalAdj"])
} else if (all(infoPval[1] == "No", infoPval[2] == "No")){ # Any information
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else if (infoPval[1] == "Yes"){ # P-values info, then adjusted p-values are estimated
if (is.na(infoPval[3])){
adjPvals <- c(adjPvals, rep(NA, nrow(dfProts[dfProts$ID == i, ])))
} else {
pvalores <- as.vector(as.numeric(dfProts[dfProts$ID == i, "pval"]))
ni <- as.numeric(infoPval[3])
ajustados <- stats::p.adjust(
p = pvalores,
method = "BH",
n = ni # Total proteins
)
adjPvals <- c(adjPvals, ajustados)
}
} else {
cat("error")
}
}
dfProts$pvalAdjNew <- adjPvals
dfProts$ProbaPVAL <- ifelse(is.na(dfProts$pval) & is.na(dfProts$pvalAdj), NA,
ifelse(!is.na(dfProts$pval) & is.na(dfProts$pvalAdj), dfProts$pvalAdjNew,
ifelse(is.na(dfProts$pval) & !is.na(dfProts$pvalAdj), dfProts$pvalAdj,
ifelse(!is.na(dfProts$pval) & !is.na(dfProts$pvalAdj), dfProts$pvalAdj, "Error"
)
)
)
)
# Checking that the ifelse have worked properly
dfProts %>% dplyr::select(pval, pvalAdj, pvalAdjNew, ProbaPVAL, ID) %>% View
# Checking the differences between new adjusted p-values and provided adjusted pvalues
completePvalInfo <- data %>% filter(infoPvalue == "Yes" & infoAdjustedPvalue == "Yes") %>% pull(ID)
dfProts %>%
filter(ID %in% completePvalInfo) %>%
dplyr::select(pval, pvalAdj, pvalAdjNew, ID) %>% View
# Ok, keeping info of adjustment
dfProts$pvalAdjFinal <- dfProts$ProbaPVAL
dfProts$ProbaPVAL<- NULL
dfProts$pvalAdjNew <- NULL
### logFC ####
dfProts$FC <- as.numeric(dfProts$FC)
dfProts$logfcNew <- log(dfProts$FC, base = 2)
dfProts$ProbalogFC <- ifelse(is.na(dfProts$FC) & is.na(dfProts$logFC), NA,
ifelse(!is.na(dfProts$FC) & is.na(dfProts$logFC), dfProts$logfcNew,
ifelse(is.na(dfProts$FC) & !is.na(dfProts$logFC), dfProts$logFC,
ifelse(!is.na(dfProts$FC) & !is.na(dfProts$logFC), dfProts$logFC, "Error"
)
)
)
)
# Checking differences between new and original logFC, as well as log10FC just
# in case it was provided like that
dfProts$log10 <- log(dfProts$FC, base = 10)
dfProts %>% dplyr::select(FC, logFC, logfcNew, ProbalogFC, log10) %>% View
dfError <- dfProts %>% filter(logFC != logfcNew)
table(dfError$ID) # Not real differences, only a matter of decimals
# 499_339 with extremly values of logFC. This is the only study in which new logFC
# will replace original logFC. For the rest, if logFC was provided in the original
# study, this value will be used.
dfProts$log10 <- NULL
dfProts$ProbalogFC <- NULL
dfProts$logFC <- ifelse(is.na(dfProts$FC) & is.na(dfProts$logFC), NA,
ifelse(!is.na(dfProts$FC) & is.na(dfProts$logFC), dfProts$logfcNew,
ifelse(is.na(dfProts$FC) & !is.na(dfProts$logFC), dfProts$logFC,
ifelse(!is.na(dfProts$FC) & !is.na(dfProts$logFC), dfProts$logfcNew, "Error"
)
)
)
)
dfProts$logfcNew <- NULL
## Final dataframe for qualitative analysis ####
df <- dfProts
### Duplicated protein IDs across datasets ####
length(unique(df$ID)) # 28 resultados de 27 estudios
allFrec <- table(df$ProteinID)
table(allFrec) # 13936 unique proteins; 1481 - 2 studies; 573 - 3 studies; 301 - 4 studies...
interestingFrec <- allFrec[which(allFrec > 1)] # Proteins that appear in, at least, 2 studies
interestingFrec[interestingFrec > 8] # Most frequent proteins
# Keeping proteins that appear in, at least, 2 studies
dfFinal <- df %>% filter(ProteinID %in% names(interestingFrec)) # Filter database (1)
length(unique(dfFinal$ID))
##  Final dataframe for quantitative information ####
# No overlapping proteins between plasma and saliva datasets (both from 1027 reference)
# No aggregation/exclusion is needed, independent results due to lack of overlapping
df1 <- df %>% filter(ID == "1027_15_Sal")
df2 <- df %>% filter(ID == "1027_15_Pla")
df1$ProteinID %in% df2$ProteinID
df2$ProteinID %in% df1$ProteinID
# Removing datasets without p-values or logFC
dfAmanida <- df %>% filter(!(ID %in% c("462_346", "1233_675", "57_73", "1098_977")))
length(unique(dfAmanida$ID)) # 24 comparisons from 23 studies (1097 with saliva and plasma)
# Checking logFC data
sum(is.na(dfAmanida$logFC))
# Cheking duplicated proteinID within each study
for (i in unique(dfAmanida$ID)){
cat(i, ": \t")
cat(any(duplicated(dfAmanida[which(dfAmanida$ID == i), "ProteinID"])))
cat("\n")
}
### Duplicated protein IDs across datasets ##
allFrec <- table(dfAmanida$ProteinID)
table(allFrec) # 13923 unique proteins; 1477 - 2 studies; 574 - 3 studies; 296 - 4 studies...
interestingFrec <- allFrec[which(allFrec > 1)] # Proteins that appear in, at least, 2 studiess
interestingFrec[interestingFrec > 6]  # Most frequent proteins
### Filtering & output ####
dfAmanidaFiltered <- dfAmanida %>% filter(ProteinID %in% names(interestingFrec))
