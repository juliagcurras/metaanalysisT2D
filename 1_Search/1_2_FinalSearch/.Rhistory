Sys.setenv(GITHUB_PAT = "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")
pak::pak_cleanup()
pak::pak_cache_clean()
pak::cache_clean()
pak::pkg_install("EquipoBiostatech/Biostatech@v2.0.2")
library(pak)
install.packages("pak")
pak::pkg_install("EquipoBiostatech/Biostatech@v2.0.2")
pak::pkg_install("EquipoBiostatech/Biostatech@v2.0.2", ask = FALSE, upgrade = FALSE, verbose = TRUE)
pak::pkg_install("EquipoBiostatech/Biostatech@v2.0.2")
remotes::install_github("EquipoBiostatech/Biostatech@v2.0.2")
library(Biostatech)
remove.packages("Biostatech")
pak::pkg_install("github::EquipoBiostatec/Biostatech", dependencies = FALSE)
pak::pkg_install("github::EquipoBiostatech/Biostatech", dependencies = FALSE)
library(Biostatech)
remove.packages("pak")
install.packages("pak", version = "0.6.0")
library(pak)
remotes::install_github("r-lib/pak@0.6.0")
install.packages("C:/Users/julia/Downloads/pak-0.6.0.zip", repos = NULL, type = "win.binary")
pak::pkg_install("EquipoBiostatech/Biostatech@v2.0.2")
install.packages("C:/Users/julia/Downloads/pak-0.6.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/julia/Downloads/pak-0.6.0.tar.gz", repos = NULL, type = "source")
install.packages("pak")
library(pak)
install.packages("pak", force =T)
install.packages("C:/Users/julia/Downloads/pak-0.6.0.tar.gz", repos = NULL, type = "source")
instalacionForzosa <- function() {
require(tcltk, quietly = TRUE) || install.packages("tcltk")
tt <- tktoplevel()
tkwm.title(tt, "Confirmación")
action <<- NA
tkgrid(tklabel(tt, text = "Vas a forzar la desinstalación y reinstalación en limpio del paquete Biostatech. ¿Proceder?"), padx = 10, pady = 20)
tkgrid(tkbutton(tt, text = "Sí", command = function() {action <<- TRUE; tkdestroy(tt)}), tkbutton(tt, text = "No", command = function() {action <<- FALSE; tkdestroy(tt)}), tkbutton(tt, text = "¡Odio la estadística y todo lo que representa!", command = function() {utils::browseURL("https://64.media.tumblr.com/87e76878f8bf29b16b7089c7795ee9b8/ff4e859fda5c4a4f-34/s540x810/93ef176706d02d8cce390867a9bd098e6f16d956.jpg"); action <<- FALSE; tkdestroy(tt)}), padx = 5, pady = 5, sticky = "ew")
tkfocus(tt)
tkwait.window(tt)
if (isTRUE(action)) {
require(pak, quietly = TRUE) || install.packages("pak")
if ("Biostatech" %in% rownames(installed.packages())) remove.packages("Biostatech")
pak::pkg_install("EquipoBiostatech/Biostatech@main")
message("Se ha desinstalado y reinstalado el paquete con éxito, es recomendable reiniciar la sesión de RStudio.")
library(Biostatech)
} else message("La acción ha sido cancelada.")
}
instalacionForzosa()
install.packages("pak")
instalacionForzosa <- function() {
require(tcltk, quietly = TRUE) || install.packages("tcltk")
tt <- tktoplevel()
tkwm.title(tt, "Confirmación")
action <<- NA
tkgrid(tklabel(tt, text = "Vas a forzar la desinstalación y reinstalación en limpio del paquete Biostatech. ¿Proceder?"), padx = 10, pady = 20)
tkgrid(tkbutton(tt, text = "Sí", command = function() {action <<- TRUE; tkdestroy(tt)}), tkbutton(tt, text = "No", command = function() {action <<- FALSE; tkdestroy(tt)}), tkbutton(tt, text = "¡Odio la estadística y todo lo que representa!", command = function() {utils::browseURL("https://64.media.tumblr.com/87e76878f8bf29b16b7089c7795ee9b8/ff4e859fda5c4a4f-34/s540x810/93ef176706d02d8cce390867a9bd098e6f16d956.jpg"); action <<- FALSE; tkdestroy(tt)}), padx = 5, pady = 5, sticky = "ew")
tkfocus(tt)
tkwait.window(tt)
if (isTRUE(action)) {
require(pak, quietly = TRUE) || install.packages("pak")
if ("Biostatech" %in% rownames(installed.packages())) remove.packages("Biostatech")
pak::pkg_install("EquipoBiostatech/Biostatech@main")
message("Se ha desinstalado y reinstalado el paquete con éxito, es recomendable reiniciar la sesión de RStudio.")
library(Biostatech)
} else message("La acción ha sido cancelada.")
}
instalacionForzosa()
remove.packages("pak")
pak::pkg_install("EquipoBiostatech/Biostatech")
install.packages("pak")
pak::pkg_install("EquipoBiostatech/Biostatech")
library(Biostatech)
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
searchDataBasal <- function(df){
ids <- unique(df$ID)
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
return(dfBasal)
}
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
View(data)
View(data)
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
## Filter
dfBasalImportant <- dfBasal %>%
dplyr::select(Reference, SampleSizeControls, SampleSizeDiabetics,
TypeOfSample, TypeOfSample_2, InfoFC, infoPvalue,
infoAdjustedPvalue, RawData) %>%
dplyr::rename(
`Sample size control group` = SampleSizeControls,
`Sample size T2DM group` = SampleSizeDiabetics,
`Type of sample` = TypeOfSample,
`Type of sample (grouped)` = TypeOfSample_2,
`Fold change data?` = InfoFC,
`P-value data?` = infoPvalue,
`Adjusted p-value data?` = infoAdjustedPvalue,
`Raw data?` = RawData
)
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
ids <- unique(df$ID)
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
searchProtein <- function(protein){
df <- data %>%
dplyr::filter(ProteinID == protein)
return(df)
}
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
View(basal)
basal$DOI
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
basal$DOI <- paste0(
"<a href='https://doi.org/", basal$DOI, "' target='_blank'>Ver en NCBI</a>"
)
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
# Libraries
library(dplyr)
library(shiny)
library(shinycustomloader)
library(bslib)
library(DT)
library(plotly)
library(Hmisc)
library(ggplot2)
# Loading data ####
basal <- readRDS(file = "basalDatabase.rds")
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
protein <- "P01011"
df <- data %>%
dplyr::filter(ProteinID == protein)
View(df)
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
colorPalette <- function(gradiente = FALSE, show = FALSE,
n = NULL, removeWhite = TRUE) {
# colores
# paletaDisc <- c(
#   "#003C72", "#005B9A", "#1786A3", "#2FB2AD", "#C3E5BC", "#BCD8E5",
#   "#9389C7", "#D1BCE5", "#C67DD8", "#CBCBCB"
# )
paletaDisc <- c(
"#0F2537", "#3B4D5B", "#4A5A67", "#2CB8B1", "#89E3DF", "#BCD8E5",
"#F4B494" ,"#F2A57E", "#EE8A58", "#E96824", "#81340D"
)
gradientePal0 <- grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67", "#2CB8B1", "#89E3DF", "#BCD8E5",
"white",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
# gradientePal0 <- grDevices::colorRampPalette(colors = c(
#   "#003C72", "#005B9A", "#1786A3",
#   "#2FB2AD", "#BCD8E5", "white",
#   "white", "#D1BCE5", "#C67DD8",
#   "#9389C7", "#544797", "#2E2753"
# ))
if (removeWhite){
gradientePal0 <-  grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67", "#2CB8B1", "#89E3DF", "#BCD8E5",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
}
gradientePal <- gradientePal0(200)
# Opciones de salida
if (show) {
# Enseñar graficos únicamente si show es TRUE
par(mfrow = c(2, 1))
plot(rep(1, length(paletaDisc)),
col = paletaDisc, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta discreta", xaxt = "n"
)
plot(rep(1, 200),
col = gradientePal, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta en gradiente", xaxt = "n"
)
par(mfrow = c(1, 1))
} else if (!show) {
# si show es FALSE, no se enseñan los gráficos y se evalúa el parámetro n
if (is.null(n)) {
##### si no hay n, se devuelve la paleta completa, gradiente o discreta según lo indicado
if (!gradiente) {
return(paletaDisc)
} else if (gradiente) {
return(gradientePal)
}
} else if (!is.null(n) & is.numeric(n)) {
##### si hay n, se devuelven tantos colores como n indicado
if (n == 1) {
cores <- "#E96824"
} else if (n == 2) {
cores <- paletaDisc[c(1, 4)]
} else if (n == 3) {
cores <- paletaDisc[c(1, 3, 4)]
} else if (n == 4) {
cores <- paletaDisc[c(1, 3, 4, 7)]
} else if (n == 5 & n < length(paletaDisc)) {
cores <- paletaDisc[c(1, 3, 4, 7, 9)]
} else if (n <= length(paletaDisc)) { # Hasta aquí paleta discreta
cores <- paletaDisc[1:n]
} else if (n > length(paletaDisc)) { # Paleta en gradiente
cores <- gradientePal0(n)
}
return(cores)
} else {
stop("Ha habido algún error.")
}
}
}
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
colorPalette <- function(gradiente = FALSE, show = FALSE,
n = NULL, removeWhite = TRUE) {
# colores
# paletaDisc <- c(
#   "#003C72", "#005B9A", "#1786A3", "#2FB2AD", "#C3E5BC", "#BCD8E5",
#   "#9389C7", "#D1BCE5", "#C67DD8", "#CBCBCB"
# )
paletaDisc <- c(
"#0F2537", "#3B4D5B", "#4A5A67",  "#BCD8E5", #"#2CB8B1", "#89E3DF",
"#F4B494" ,"#F2A57E", "#EE8A58", "#E96824", "#81340D"
)
gradientePal0 <- grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67",  "#BCD8E5", #"#2CB8B1", "#89E3DF",
"white",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
# gradientePal0 <- grDevices::colorRampPalette(colors = c(
#   "#003C72", "#005B9A", "#1786A3",
#   "#2FB2AD", "#BCD8E5", "white",
#   "white", "#D1BCE5", "#C67DD8",
#   "#9389C7", "#544797", "#2E2753"
# ))
if (removeWhite){
gradientePal0 <-  grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67", "#BCD8E5", # "#2CB8B1", "#89E3DF",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
}
gradientePal <- gradientePal0(200)
# Opciones de salida
if (show) {
# Enseñar graficos únicamente si show es TRUE
par(mfrow = c(2, 1))
plot(rep(1, length(paletaDisc)),
col = paletaDisc, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta discreta", xaxt = "n"
)
plot(rep(1, 200),
col = gradientePal, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta en gradiente", xaxt = "n"
)
par(mfrow = c(1, 1))
} else if (!show) {
# si show es FALSE, no se enseñan los gráficos y se evalúa el parámetro n
if (is.null(n)) {
##### si no hay n, se devuelve la paleta completa, gradiente o discreta según lo indicado
if (!gradiente) {
return(paletaDisc)
} else if (gradiente) {
return(gradientePal)
}
} else if (!is.null(n) & is.numeric(n)) {
##### si hay n, se devuelven tantos colores como n indicado
if (n == 1) {
cores <- "#E96824"
} else if (n == 2) {
cores <- paletaDisc[c(1, 4)]
} else if (n == 3) {
cores <- paletaDisc[c(1, 3, 4)]
} else if (n == 4) {
cores <- paletaDisc[c(1, 3, 4, 7)]
} else if (n == 5 & n < length(paletaDisc)) {
cores <- paletaDisc[c(1, 3, 4, 7, 9)]
} else if (n <= length(paletaDisc)) { # Hasta aquí paleta discreta
cores <- paletaDisc[1:n]
} else if (n > length(paletaDisc)) { # Paleta en gradiente
cores <- gradientePal0(n)
}
return(cores)
} else {
stop("Ha habido algún error.")
}
}
}
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
colorPalette <- function(gradiente = FALSE, show = FALSE,
n = NULL, removeWhite = TRUE) {
# colores
# paletaDisc <- c(
#   "#003C72", "#005B9A", "#1786A3", "#2FB2AD", "#C3E5BC", "#BCD8E5",
#   "#9389C7", "#D1BCE5", "#C67DD8", "#CBCBCB"
# )
paletaDisc <- c(
"#0F2537", "#3B4D5B", "#4A5A67", "#8699A8", "#B8C3CC", #"#BCD8E5", #"#2CB8B1", "#89E3DF",
"#F4B494" ,"#F2A57E", "#EE8A58", "#E96824", "#81340D"
)
gradientePal0 <- grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67", "#8699A8", "#B8C3CC", #"#BCD8E5", #"#2CB8B1", "#89E3DF",
"white",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
# gradientePal0 <- grDevices::colorRampPalette(colors = c(
#   "#003C72", "#005B9A", "#1786A3",
#   "#2FB2AD", "#BCD8E5", "white",
#   "white", "#D1BCE5", "#C67DD8",
#   "#9389C7", "#544797", "#2E2753"
# ))
if (removeWhite){
gradientePal0 <-  grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67", "#8699A8", "#B8C3CC", #"#BCD8E5", # "#2CB8B1", "#89E3DF",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
}
gradientePal <- gradientePal0(200)
# Opciones de salida
if (show) {
# Enseñar graficos únicamente si show es TRUE
par(mfrow = c(2, 1))
plot(rep(1, length(paletaDisc)),
col = paletaDisc, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta discreta", xaxt = "n"
)
plot(rep(1, 200),
col = gradientePal, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta en gradiente", xaxt = "n"
)
par(mfrow = c(1, 1))
} else if (!show) {
# si show es FALSE, no se enseñan los gráficos y se evalúa el parámetro n
if (is.null(n)) {
##### si no hay n, se devuelve la paleta completa, gradiente o discreta según lo indicado
if (!gradiente) {
return(paletaDisc)
} else if (gradiente) {
return(gradientePal)
}
} else if (!is.null(n) & is.numeric(n)) {
##### si hay n, se devuelven tantos colores como n indicado
if (n == 1) {
cores <- "#E96824"
} else if (n == 2) {
cores <- paletaDisc[c(1, 4)]
} else if (n == 3) {
cores <- paletaDisc[c(1, 3, 4)]
} else if (n == 4) {
cores <- paletaDisc[c(1, 3, 4, 7)]
} else if (n == 5 & n < length(paletaDisc)) {
cores <- paletaDisc[c(1, 3, 4, 7, 9)]
} else if (n <= length(paletaDisc)) { # Hasta aquí paleta discreta
cores <- paletaDisc[1:n]
} else if (n > length(paletaDisc)) { # Paleta en gradiente
cores <- gradientePal0(n)
}
return(cores)
} else {
stop("Ha habido algún error.")
}
}
}
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
citation)()
citation()
citation("Boruta")
citation("mRMRe")
citation("FSelector")
citation("carety")
citation("caret")
citation("cutpointr")
citation("VennDiagram")
citation("ggplot28")
citation("ggplot2")
citation("seriation")
rm(list=ls())
graphics.off()
search_directory <- getwd()
search_directory
setwd("C:/Users/julia/Documents/GitHub/metaanalysisT2D/1_Search/1_2_FinalSearch")
search_directory <- "C:/Users/julia/Documents/GitHub/metaanalysisT2D/1_Search/1_2_FinalSearch"
setwd(search_directory)
library(dplyr)
# Manually ####
## Open data ####
scopus <-  read.csv(file = paste0(search_directory, "/1_scopus.csv"), header = T)
pubmed <- read.csv(file = paste0(search_directory, "/2_Pubmed.csv"), header = T)
pubmed_2 <- read.csv(file = paste0(search_directory, "/2_PubMed_FromPubmed_format.csv"),
header = T, check.names = F) # From Pubmedtocsv shiny app https://jgcurras.shinyapps.io/pubmedtocsv/
wos <- read.csv(file = paste0(search_directory, "/3_WOS.csv"), header = T, sep = ";")
sort(colnames(scopus))
sort(colnames(pubmed))
sort(colnames(wos))
commonCols <- c(
"ID", # nº_database
"Authors", # Authors
"Title", # Title, Title, Article.Title
"Abstract", # extract abstract from 2_PubMed_Pubmed.txt or 2_Pubmed_abstract.txt
"Keywords", # Author.Keywords, - , Author.Keywords
"Affiliations", # Affiliations, - , Affiliations # extract AD tag from 2_PubMed_Pubmed.txt for all articles
"Year", # Year, Publication.Year, Publication.Year
"Journal", # Source, Journal.Book, Source.Title
"DOI"
)
dfScopus <- scopus %>%
dplyr::select(Authors, Title, Abstract, Author.Keywords,
Affiliations, Year, Source, DOI) %>%
dplyr::rename(
Keywords = Author.Keywords,
Journal = Source) %>%
dplyr::mutate(
ID = row_number(),
Database = "Scopus"
) %>%
dplyr::select(ID, everything())
### PUBMED ####
dfPubmed <- pubmed %>%
dplyr::select(Authors, Title, Publication.Year, Journal.Book,
DOI, PMID) %>%
dplyr::rename(
Year = Publication.Year,
Journal =  Journal.Book
) %>%
dplyr::mutate(
ID = row_number(),
Database = "PubMed") %>%
dplyr::select(ID, everything())
dfAbstract <- pubmed_2 %>%
select(`PubMed Identifier  (PMID)`,
`Abstract  (AB)`, `MeSH Terms  (MH)`,
`Affiliation  (AD)`) %>%
rename(
PMID = `PubMed Identifier  (PMID)`,
Abstract = `Abstract  (AB)`,
Keywords = `MeSH Terms  (MH)`,
Affiliations = `Affiliation  (AD)`)
dfPubmed <- merge(dfAbstract, dfPubmed, by = "PMID", all = T)
dfPubmed <- dfPubmed %>%
select(-PMID, ID, Authors, Title, Abstract, )
### WOS ####
dfWOS <- wos %>%
dplyr::select(Authors, Article.Title, Abstract, Author.Keywords, Affiliations,
Publication.Year, Source.Title, DOI) %>%
dplyr::rename(
Title = Article.Title,
Keywords = Author.Keywords,
Year = Publication.Year,
Journal = Source.Title
) %>%
dplyr::mutate(
ID = row_number(),
Database = "WOS"
) %>%
dplyr::select(ID, everything())
## Merge everything ####
data <- merge(dfScopus, dfWOS, by = colnames(dfScopus), all =T)
data <- merge(data, dfPubmed, by = colnames(dfPubmed), all = T)
data <- data %>%
# dplyr::arrange(Database) %>%
mutate(ID = paste0(ID, "_", Database)) %>%
dplyr::select(ID, everything()) %>%
dplyr::arrange(Database)
data[data == ""] <- NA # Just in case
table(table(data$DOI, useNA = 'always') > 1, useNA = 'always') # 657 únicos (28 son NA en DOI), 611 repetidos
sum(is.na(data$DOI)) # 28
### Removing... ####
dataFinal <- data %>%
dplyr::distinct(DOI, .keep_all = TRUE) # 1273 potentially relevant studies
dataFinal <- dataFinal %>% filter(!is.na(DOI))
